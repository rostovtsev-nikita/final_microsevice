В ходе решения задания разрешено использовать любые интернет-ресурсы.
Оценивается общий прогресс решения задания.
Результат работы представляет собой папку проекта в формате zip со всеми файлами проекта без исключений.
Результат передаются куратору.

=========================================================================================================================================

Вам предстоит реализовать функционал по анализу сайтов в сети Интернет в виде микросервиса.
Анализ заключается в проверке на наличие в тексте страницы сайта некоторой фразы.
Регистр букв не имеет значения. Пробелы и табуляция не учитываются.
Допускается, что заданная фраза может отличаться от той, что на сайте, не более чем на 2 любых буквы.

На вход поступают:
- Aдрес сайта.
- Фраза для поиска.

В качестве результата ожидается:
- Факт наличия фразы на сайте
- Расстояние Левенштейна

В случае ошибок со стороны проверяемого сайта, в ответе должны быть описание ошибки и соотвествующий HTTP код.
Взаимодействие реализовано с помощью JSON. Кодировка UTF-8.

Авторизация доступа к микросервису осуществляется с помощью API токена.
Новые API токены могут быть созданы с помощью прикладного вспомогательного скрипта, который запускается отдельно.
Для генерации токена используются криптостойкие алгоритмы генерации случайных последовательностей.
Последовательность не должна содержать специальных символов.
API токены должны быть захэшированы алгоритмом SHA-3 512.

Микросервис должен иметь возможность одновременной обработки множества запросов.
Микросервис должен логгировать факты обработки запросов, учитывая параметры, время и возможные состояния.
Микросервис должен выполнять кэширование результатов. Время жизни кэша - 60 минут.

Разработанный код должен быть покрыт тестами.

Используйте следующий стек технологий:  Python + git + реляционная СУБД + Кэш-хранилище

=========================================================================================================================================

Рекомендации по выполнению:

0) Убедитесь, что среда разработки установлена и обновлена до последней версии.

1) Настройте среду разработки, проект и окружение:
	1.1) Установите Python актуальной версии.
	1.2) Установите реляционную СУБД (MySQL / Postresql).
	1.3) Установите Git.
	1.4) Установите кеш-хранилище (Redis / Tarantool).
	1.5) Установите инструмент тестирования API (Bruno / Postman).
	1.6) Настройте виртуальную среду Python для папки проекта.
	1.7) Установите в виртуальную среду следующие библиотеки Python:
		a) fastapi;
		b) hypercorn (Windows) / unicorn (Unix);
		c) pcycopg 3 (+[binary]) (если установлен Postresql) или другой драйвер для выбранной реляционной СУБД;
		d) sqlalchemy 2.0+;
		e) redis / tarantool-python или любой другой драйвер для кеш-хранилища

2) Создайте git репозиторий в папке проекта.

3) Настройте файл .gitignore в корне проекта на игнорирование побочных файлов и папок проекта (например, папки IDE и виртуальной среды).

4) Сопровождайте создаваемые классы, методы и функции комментариями. Старайтесь соблюдать принцип "Почему, а не как".

5) Старайтесь разделять самостоятельный функционал по отдельным файлам.

6) Сопровождайте выполнение коммитами в созданный репозиторий.

7) Пользуйтесь принципами SOLID, DRY, KISS, YAGNI.

8) Пользуйтесь паттернами проектирования, но не ограничивайтесь ими.

9) Попробуйте сначала написать unit-тест перед написанием самой функции.

10) Пользуйтесь ORM для описания моделей данных СУБД.

11) Не забывайте проверять приходящие от пользователя данные на валидность.

12) Используйте HTTP методы и HTTP коды в соответствии с контекстом запроса.

13) Некоторые требования могут быть намеренно нечеткими. Не бойтесь рационально додумать недостающие требования.
